terraform {

   required_version = ">=0.12"

   required_providers {
     azurerm = {
       source = "hashicorp/azurerm"
       version = "~>2.0"
     }
   }
 }

 provider "azurerm" {
   features {}
 }

 resource "azurerm_resource_group" "AZ_RESOURCE_GROUP" {
   name     = "AZ_RESOURCE_GROUP_NAME"
   location = "AZ_RESOURCE_LOCATION"
 }

 resource "azurerm_virtual_network" "AZ_V_NETWORK" {
   name                = "AZ_V_NETWORK_NAME"
   address_space       = ["10.0.0.0/16"]
   location            = azurerm_resource_group.AZ_RESOURCE_GROUP.location
   resource_group_name = azurerm_resource_group.AZ_RESOURCE_GROUP.name
 }

 resource "azurerm_subnet" "AZ_V_NETWORK_SUBNET" {
   name                 = "AZ_V_NETWORK_SUBNET_NAME"
   resource_group_name  = azurerm_resource_group.AZ_RESOURCE_GROUP.name
   virtual_network_name = azurerm_virtual_network.AZ_V_NETWORK.name
   address_prefixes     = ["10.0.2.0/24"]
 }

 resource "azurerm_public_ip" "AZ_V_NETWORK_IP_PUBLIC" {
   name                         = "AZ_V_NETWORK_IP_PUBLIC_LB_NAME"
   location                     = azurerm_resource_group.AZ_RESOURCE_GROUP.location
   resource_group_name          = azurerm_resource_group.AZ_RESOURCE_GROUP.name
   allocation_method            = "Static"
 }

 resource "azurerm_lb" "AZ_V_NETWORK_LOAD_BALANCER" {
   name                = "AZ_V_NETWORK_LOAD_BALANCER_NAME"
   location            = azurerm_resource_group.AZ_RESOURCE_GROUP.location
   resource_group_name = azurerm_resource_group.AZ_RESOURCE_GROUP.name

   frontend_ip_configuration {
     name                 = "AZ_V_NETWORK_IP_PUBLIC_LB_IPV4"
     public_ip_address_id = azurerm_public_ip.AZ_V_NETWORK_IP_PUBLIC.id
   }
 }

 resource "azurerm_lb_backend_address_pool" "AZ_V_NETWORK_LOAD_BALANCER_POOL_ADDRESS_BACKEND" {
   loadbalancer_id     = azurerm_lb.AZ_V_NETWORK_LOAD_BALANCER.id
   name                = "AZ_V_NETWORK_LOAD_BALANCER_POOL_ADDRESS_BACKEND_NAME"
 }

 resource "azurerm_network_interface" "AZ_V_NETWORK_LOAD_BALANCER_NIC" {
   count               = 3
   name                = "AZ_V_NETWORK_LOAD_BALANCER_NIC_NAME${count.index}"
   location            = azurerm_resource_group.AZ_RESOURCE_GROUP.location
   resource_group_name = azurerm_resource_group.AZ_RESOURCE_GROUP.name

   ip_configuration {
     name                          = "testConfiguration"
     subnet_id                     = azurerm_subnet.AZ_V_NETWORK_SUBNET.id
     private_ip_address_allocation = "dynamic"
   }
 }

 # resource "azurerm_managed_disk" "AZ_DISK_MANAGED_DATA" {
 #   count                = 2
 #   name                 = "AZ_DISK_MANAGED_DATA_NAME_EXISTING_${count.index}"
 #   location             = azurerm_resource_group.AZ_RESOURCE_GROUP.location
 #   resource_group_name = azurerm_resource_group.AZ_RESOURCE_GROUP.name
 #   storage_account_type = "Standard_LRS"
 #   create_option        = "Empty"
 #   disk_size_gb         = "1023"
 # }

 resource "azurerm_availability_set" "AZ_VM_AVAILABILITY_SET" {
   name                         = "AZ_VM_AVAILABILITY_SET_NAME"
   location                     = azurerm_resource_group.AZ_RESOURCE_GROUP.location
   resource_group_name          = azurerm_resource_group.AZ_RESOURCE_GROUP.name
   platform_fault_domain_count  = 3
   platform_update_domain_count = 3
   managed                      = true
 }

 resource "azurerm_virtual_machine" "AZ_VIRTUAL_MACHINE" {
   count                 = 3
   name                  = "AZ_VIRTUAL_MACHINE_NAME${count.index}"
   location              = azurerm_resource_group.AZ_RESOURCE_GROUP.location
   availability_set_id   = azurerm_availability_set.AZ_VM_AVAILABILITY_SET.id
   resource_group_name   = azurerm_resource_group.AZ_RESOURCE_GROUP.name
   network_interface_ids = [element(azurerm_network_interface.AZ_V_NETWORK_LOAD_BALANCER_NIC.*.id, count.index)]
   vm_size               = "Standard_DS1_v2"

   # Uncomment this line to delete the OS disk automatically when deleting the VM
   # delete_os_disk_on_termination = true

   # Uncomment this line to delete the data disks automatically when deleting the VM
   # delete_data_disks_on_termination = true

   storage_image_reference {
     publisher = "Canonical"
     offer     = "UbuntuServer"
     sku       = "16.04-LTS"
     version   = "latest"
   }

   storage_os_disk {
     name              = "AZ_DISK_MANAGED_OS_NAME${count.index}"
     caching           = "ReadWrite"
     create_option     = "FromImage"
     managed_disk_type = "Standard_LRS"
   }

   # Optional data disks
   # storage_data_disk {
   #   name              = "AZ_DISK_MANAGED_DATA_NAME_NEW_${count.index}"
   #   managed_disk_type = "Standard_LRS"
   #   create_option     = "Empty"
   #   lun               = 0
   #   disk_size_gb      = "1023"
   # }

   storage_data_disk {
     name            = element(azurerm_managed_disk.AZ_DISK_MANAGED_DATA.*.name, count.index)
     managed_disk_id = element(azurerm_managed_disk.AZ_DISK_MANAGED_DATA.*.id, count.index)
     create_option   = "Attach"
     lun             = 1
     disk_size_gb    = element(azurerm_managed_disk.AZ_DISK_MANAGED_DATA.*.disk_size_gb, count.index)
   }

   os_profile {
     computer_name  = "hostname"
     admin_username = "testadmin"
     admin_password = "Password1234!"
   }

   os_profile_linux_config {
     disable_password_authentication = false
   }

   tags = {
     environment = "AZ_TF_RANCHER_RKE_CLUSTER"
   }
 }